name: CI/CD

on:
  pull_request:
    paths:
      - '.github/workflows/ci-cd.yml'
      - 'CMakeLists.txt'
      - '.clang-tidy'
      - '**/*.cpp'
      - '**/*.hpp'
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  ci:
    name: ${{ matrix.os_name }} (${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    env:
      CACHE: sccache # recommended for stable Windows support
    defaults:
      run:
        shell: bash # since the default shell on Windows runners was changed to PowerShell

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        build_type: [Debug, Release]
        include:
          - os: macos-latest
            os_name: macOS
          - os: ubuntu-latest
            os_name: Linux
          - os: windows-latest
            os_name: Windows

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

        # should come after checkout
      - name: Set up cache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-${{ matrix.build_type }}-${{ github.head_ref || github.ref_name }}
          variant: ${{ env.CACHE }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/${{ matrix.build_type }}/_deps
          key: deps-${{ matrix.os }}-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: ${{ matrix.os }}-${{ matrix.build_type }}-

      - name: Configure project # depending on "linting", as Clang-Tidy is only pre-installed on Ubuntu
        run: |
          args="-B build/${{ matrix.build_type }}
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
            -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
            -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CACHE }}
            -DFREDDY_STATS=ON
            -DFREDDY_TEST=ON
            -DCMAKE_CXX_COMPILER=sccache
            -DCMAKE_CXX_COMPILER_ARG1=cl.exe
          "

          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.build_type }}" == "Debug" ]]; then
            args+="-DCLANG_TIDY=ON -DCMAKE_CXX_CLANG_TIDY='-warnings-as-errors=*'"
          fi

          cmake $args

      - name: Build binaries
        # Windows has a multi-config generator, all macOS machines offer at least 3 cores
        run: cmake --build build/${{ matrix.build_type }} --config ${{ matrix.build_type }} -j3

        # testing on Ubuntu, as the associated VM is one of the fastest runners
      - name: Run tests
        if: matrix.os == 'ubuntu-latest'
        working-directory: ./build/${{ matrix.build_type }}
        run: ctest --output-on-failure -j4

      - name: Measure coverage
        if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'Debug'
        working-directory: ./build/${{ matrix.build_type }}
        run: |
          cov_min=80
          cov=$(ctest -T Coverage | grep -o '[^ ]*%' | sed 's/%//' | cut -d. -f1)
          if (( cov < cov_min )); then
            echo "\e[31mTest coverage ($cov%) below $cov_min%\e[0m"
            exit 1
          fi

  cd:
    name: Code Formatting
    runs-on: ubuntu-latest # since ClangFormat is pre-installed there
    if: github.ref == 'refs/heads/main'
    needs: ci
    permissions:
      contents: write # to be able to create a commit

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Format code
        run: find . -iname '*.cpp' -o -iname '*.hpp' | xargs clang-format -i

      - name: Push changes
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git diff --exit-code || (git commit -a -m 'style: format code' && git push)
