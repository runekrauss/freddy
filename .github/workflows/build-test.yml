name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    paths:
      - '.github/workflows/build-test.yml'
      - 'CMakeLists.txt'
      - '.clang-tidy'
      - '**/*.cpp'
      - '**/*.hpp'
  workflow_dispatch: # enables manual execution of this pipeline
  workflow_call:     # allow this workflow to be called by others such as CD
  schedule:
    - cron: '0 3 */6 * *' # "weekly" due to potential package upgrades

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }} # as REF is not available here
  cancel-in-progress: true

permissions:
  contents: read

env:
  REF: ${{ github.head_ref || github.ref_name }} # used as part of the cache keys

jobs:
  clangformat:
    name: ClangFormat on C++
    runs-on: ubuntu-latest # since this tool is pre-installed there
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write # to be able to create a commit

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Format code
        run: find . -iname '*.cpp' -o -iname '*.hpp' | xargs clang-format -i

      - name: Push changes
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git diff --exit-code || (git commit -a -m 'style: format code' && git push)

  gcc:
    name: GCC on Linux (${{ matrix.build_type }})
    runs-on: ubuntu-latest
    needs: clangformat
    if: not cancelled() && (needs.clangformat.result == 'skipped' || needs.clangformat.result == 'success')
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc]
        build_type: [Debug, Release]

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      # should come after checkout
      - name: Set up cache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.compiler }}-${{ matrix.build_type }}-${{ env.REF }} # branch-based

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/_deps
          key: deps-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ env.REF }}-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: deps-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ env.REF }}-

      - name: Configure project # depending on linting, as Clang-Tidy is only pre-installed on Ubuntu
        run: >
          cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
          -DCLANG_TIDY=ON -DCMAKE_CXX_CLANG_TIDY='-warnings-as-errors=*'
          -DFREDDY_STATS=ON -DFREDDY_TEST=ON

      - name: Lint sources / Build binaries
        run: cmake --build build -j$(nproc)

      - name: Run tests # on Ubuntu, as the associated VM is one of the fastest runners
        working-directory: ./build
        run: ctest --output-on-failure -j$(nproc)

      - name: Measure coverage
        working-directory: ./build
        run: |
          cov_min=80
          cov=$(ctest -T Coverage | grep -o '[^ ]*%' | sed 's/%//' | cut -d. -f1)
          if (( cov < cov_min )); then
            echo "\e[31mTest coverage ($cov%) below $cov_min%\e[0m"
            exit 1
          fi

  clang:
    name: Clang on macOS
    runs-on: macos-latest
    needs: clangformat
    if: not cancelled() && (needs.clangformat.result == 'skipped' || needs.clangformat.result == 'success')

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up cache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ env.REF }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/_deps
          key: deps-${{ github.job }}-${{ env.REF }}-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: deps-${{ github.job }}-${{ env.REF }}-

      - name: Configure project
        run: cmake -G Ninja -B build -DCMAKE_COMPILE_WARNING_AS_ERROR=ON -DFREDDY_STATS=ON -DFREDDY_TEST=ON

      - name: Build binaries
        run: cmake --build build

  msvc:
    name: MSVC on Windows
    runs-on: windows-latest
    needs: clangformat
    if: not cancelled() && (needs.clangformat.result == 'skipped' || needs.clangformat.result == 'success')
    defaults:
      run:
        shell: bash # since the default shell on Windows runners was changed to PowerShell

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up cache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ env.REF }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/_deps
          key: deps-${{ github.job }}-${{ env.REF }}-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: deps-${{ github.job }}-${{ env.REF }}-

      - name: Configure project
        run: cmake -B build -DCMAKE_COMPILE_WARNING_AS_ERROR=ON -DFREDDY_STATS=ON -DFREDDY_TEST=ON

      - name: Build binaries
        # Windows has a multi-config generator.
        run: cmake --build build --config Release -j$NUMBER_OF_PROCESSORS
